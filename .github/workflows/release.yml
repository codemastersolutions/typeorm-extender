name: Release and Publish

# Este workflow executa APENAS quando um Pull Request é completado com sucesso:
# - PR deve estar merged (não apenas fechado)
# - PR deve estar no estado 'closed'
# - PR não deve ser um draft
# - Deve ter um merge commit SHA válido

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true && github.event.pull_request.state == 'closed' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify successful merge
        run: |
          echo "Verificando se o merge foi bem-sucedido..."
          echo "PR merged: ${{ github.event.pull_request.merged }}"
          echo "PR state: ${{ github.event.pull_request.state }}"
          echo "PR draft: ${{ github.event.pull_request.draft }}"
          echo "Merge commit SHA: ${{ github.event.pull_request.merge_commit_sha }}"
          
          # Verifica se o merge commit existe
          if [ "${{ github.event.pull_request.merge_commit_sha }}" = "null" ] || [ -z "${{ github.event.pull_request.merge_commit_sha }}" ]; then
            echo "❌ Erro: Merge commit SHA não encontrado"
            exit 1
          fi
          
          echo "✅ Merge verificado com sucesso"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Build project
        run: npm run build
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Determine version bump type
        id: version-bump
        run: |
          # Analisa o título do PR para determinar o tipo de bump
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          
          # Verifica por palavras-chave no título e corpo do PR
          if echo "$PR_TITLE $PR_BODY" | grep -iE "(breaking|major|BREAKING CHANGE)"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Version bump: MAJOR (breaking changes detected)"
          elif echo "$PR_TITLE $PR_BODY" | grep -iE "(feat|feature|minor)"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Version bump: MINOR (new feature detected)"
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Version bump: PATCH (bug fix or other changes)"
          fi
      
      - name: Bump version
        id: version
        run: |
          BUMP_TYPE="${{ steps.version-bump.outputs.bump_type }}"
          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
      
      - name: Update package-lock.json
        run: npm install --package-lock-only
      
      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push origin main
      
      - name: Create Git tag
        run: |
          git tag ${{ steps.version.outputs.new_version }}
          git push origin ${{ steps.version.outputs.new_version }}
      
      - name: Generate changelog
        id: changelog
        run: |
          # Gera changelog baseado nos commits desde a última tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Salva o changelog em um arquivo
          echo "## Changes" > changelog.md
          echo "" >> changelog.md
          echo "$COMMITS" >> changelog.md
          
          # Também salva para usar no release
          {
            echo "changelog<<EOF"
            cat changelog.md
            echo "EOF"
          } >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.pull_request.base.sha }}..${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false
      
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Release Created Successfully!**\n\n` +
                    `- **Version**: ${{ steps.version.outputs.new_version }}\n` +
                    `- **Type**: ${{ steps.version-bump.outputs.bump_type }}\n` +
                    `- **NPM**: https://www.npmjs.com/package/@codemastersolutions/typeorm-extender\n` +
                    `- **Release**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.new_version }}`
            });